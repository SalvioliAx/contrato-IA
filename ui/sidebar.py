import streamlit as st
from services.collections import (
    listar_colecoes_salvas, salvar_colecao_atual, carregar_colecao
)
from services.document_loader import obter_vector_store_de_uploads

def render_sidebar(embeddings_global, google_api_key):
    """
    Renderiza a barra lateral para upload de arquivos e gerenciamento de cole√ß√µes.
    """
    st.sidebar.header("üìÇ Gerenciador de Documentos")

    # Widget para upload de m√∫ltiplos arquivos PDF
    uploaded_files = st.sidebar.file_uploader(
        "Carregar novos contratos (PDF)", type=["pdf"], accept_multiple_files=True, key="upload_pdf"
    )

    # L√≥gica para salvar a sess√£o atual como uma cole√ß√£o
    nome_colecao_salvar = st.sidebar.text_input("Nome para salvar a cole√ß√£o atual:")
    if st.sidebar.button("üíæ Salvar cole√ß√£o"):
        if "vector_store_atual" in st.session_state and uploaded_files: # S√≥ permite salvar se veio de um upload
            salvar_colecao_atual(
                nome_colecao_salvar,
                st.session_state.vector_store_atual,
                st.session_state.nomes_arquivos_atuais
            )
        else:
            st.sidebar.warning("Carregue novos arquivos para poder salvar uma cole√ß√£o.")


    st.sidebar.markdown("---")
    # L√≥gica para carregar uma cole√ß√£o existente
    colecoes_existentes = listar_colecoes_salvas()
    if colecoes_existentes:
        colecao_selecionada = st.sidebar.selectbox("Ou abrir uma cole√ß√£o salva:", colecoes_existentes, index=None, placeholder="Selecione uma cole√ß√£o")
        if st.sidebar.button("üìÇ Carregar cole√ß√£o"):
            if colecao_selecionada and embeddings_global:
                vs, nomes = carregar_colecao(colecao_selecionada, embeddings_global)
                if vs:
                    # Atualiza o estado da sess√£o com a cole√ß√£o carregada
                    st.session_state.vector_store_atual = vs
                    st.session_state.nomes_arquivos_atuais = nomes
                    # ADICIONADO: Limpa os arquivos originais ao carregar uma cole√ß√£o
                    st.session_state.arquivos_pdf_originais = None 
                    st.session_state.messages = [] # Limpa o chat
                    st.rerun()
            else:
                st.sidebar.error("Selecione uma cole√ß√£o e certifique-se que a API Key est√° configurada.")

    # Processa os arquivos rec√©m-carregados
    if uploaded_files:
        # Bot√£o para iniciar o processamento, evitando reprocessamento a cada intera√ß√£o
        if st.sidebar.button("Processar Documentos Carregados"):
            vs, nomes = obter_vector_store_de_uploads(uploaded_files, embeddings_global, google_api_key)
            if vs:
                st.session_state.vector_store_atual = vs
                st.session_state.nomes_arquivos_atuais = nomes
                # ADICIONADO: Salva os objetos de arquivo originais na sess√£o
                st.session_state.arquivos_pdf_originais = uploaded_files
                st.session_state.messages = [] # Limpa o chat
                st.rerun() # Recarrega a p√°gina para refletir o novo estado
